<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns="http://code.lds.org/schema/wamulator" xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://code.lds.org/schema/wamulator"
	elementFormDefault="qualified" attributeFormDefault="unqualified">
	<xsd:annotation>
		<xsd:documentation><![CDATA[
			This is the schema definition for wamulator config files.
		]]></xsd:documentation>
	</xsd:annotation>
	<xsd:simpleType name="aliasable">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value="\{\{.*\}\}"></xsd:pattern>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="aliasableBoolean">
		<xsd:union>
			<xsd:simpleType>
				<xsd:restriction base="xsd:boolean"/>
			</xsd:simpleType>
			<xsd:simpleType>
				<xsd:restriction base="aliasable"/>
			</xsd:simpleType>
		</xsd:union>
	</xsd:simpleType>
	<xsd:simpleType name="aliasableInteger">
		<xsd:union>
			<xsd:simpleType>
				<xsd:restriction base="xsd:integer"></xsd:restriction>
			</xsd:simpleType>
			<xsd:simpleType>
				<xsd:restriction base="aliasable"/>
			</xsd:simpleType>
		</xsd:union>
	</xsd:simpleType>
	<xsd:simpleType name="aliasableToken">
		<xsd:union>
			<xsd:simpleType>
				<xsd:restriction base="xsd:token"></xsd:restriction>
			</xsd:simpleType>
			<xsd:simpleType>
				<xsd:restriction base="aliasable"/>
			</xsd:simpleType>
		</xsd:union>
	</xsd:simpleType>
	<xsd:simpleType name="port">
		<xsd:union>
			<xsd:simpleType>
				<xsd:restriction base="aliasableInteger"></xsd:restriction>
			</xsd:simpleType>
			<xsd:simpleType>
				<xsd:restriction base="xsd:token">
					<xsd:enumeration value="auto"></xsd:enumeration>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:union>
	</xsd:simpleType>
	<xsd:simpleType name="aliasableTokenEndsInStar">
		<xsd:restriction base="aliasableToken">
			<xsd:pattern value=".*\*"></xsd:pattern>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:element name="config">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="conditions" minOccurs="0">
					<xsd:annotation>
						<xsd:documentation><![CDATA[
							(v5.20+) Allows for embedding condition syntax in the configuration file
						]]></xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="condition" minOccurs="0" maxOccurs="unbounded">
								<xsd:complexType>
									<xsd:sequence>
										<xsd:any processContents="skip">
											<xsd:annotation>
												<xsd:documentation><![CDATA[
													See condition documentation here:  https://tech.lds.org/wiki/index.php/SSO_Simulator_Condition_Syntax
												]]></xsd:documentation>
											</xsd:annotation>
										</xsd:any>
									</xsd:sequence>
									<xsd:attribute name="alias" use="required" type="aliasableToken">
										<xsd:annotation>
											<xsd:documentation><![CDATA[
												The name of the alias to be referenced in condition attributes of both <by-site>'s child <allow> element and <entitlements>'s child <allow> element.
											]]></xsd:documentation>
										</xsd:annotation>
									</xsd:attribute>
								</xsd:complexType>
							</xsd:element>
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="proxy-timeout" minOccurs="0">
					<xsd:complexType>
						<xsd:attribute name="inboundMillis" use="required" type="aliasableInteger">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
									Indicates the milliseconds for which a read of the input stream of a socket connecting to the proxy will block before throwing a SocketTimeoutException. Defaults to 20000 milliseconds which is 20 seconds. A value of 0 sets the timeout to infinity.
								]]></xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="outboundMillis" use="required" type="aliasableInteger">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
									Indicates the milliseconds for which a read of the input stream of the socket used by the proxy to connect to the proxied server will block before throwing a SocketTimeoutException. Defaults to 20000 milliseconds which is 20 seconds. A value of 0 sets the timeout to infinity.
								]]></xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="proxy-tls" minOccurs="0">
					<xsd:complexType>
						<xsd:attribute name="https-port" use="required" type="aliasableInteger">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
									Indicates the port on which https traffic should be received. Unlike proxy-port and console-port this attribute does NOT yet support 'auto'
								]]></xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="cert-host" use="required" type="aliasableToken">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
									Indicates the fully qualified name of the host that will be represented by the auto-generated certificate used during the initial TLS handshake for an incoming request. For such a certificate to be accepted by browsers it must match the host to which traffic was going such as "localhost.lds.org". Alternatively, RFC 2818 Http Over TLS dictates that browsers should accept certificates with a wildcard such as "*.lds.org". But such will only be accepted for that level of the domain and not further subdomains. So such a certificate will be accepted for foo.lds.org but not more.foo.lds.org.
									Note that the auto-generated certificate and its corresponding private key will be stored in the current directory in files with names of <host>-cert.pem and <host>-priv.pem respectively. For wildcarded hosts the wildcard character is specified in the filenames as two underscore characters. Upon restarting the wamulator these files are looked for and used if found so that the same certificate will continue to be used and not force you to have to accept a newly generated one in your browser the first time that you again access the proxy-tls port after restarting.
								]]></xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="console-recording" minOccurs="0">
					<xsd:annotation>
						<xsd:documentation><![CDATA[
							Specifies that the traffic that is being proxied by the SSO Simulator is to be recorded
						]]></xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="sso" type="aliasableBoolean" default="true">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
									Indicates if the console should record in-memory the traffic that is hitting the http-proxy port and display it on the SSO Traffic tab. Defaults to false. Can be ‘true’ or any other value which is interpreted as ‘false’.
								]]></xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="rest" type="aliasableBoolean" default="true">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
									Indicates if the console should record in-memory the traffic that is hitting the rest API and display it on the Rest Traffic tab. Defaults to false. Can be ‘true’ or any other value which is interpreted as ‘false’.
								]]></xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="max-entries" type="aliasableInteger" default="1000">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
									Specifies how many traffic logs to keep.
								]]></xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="enable-debug-logging" type="aliasableBoolean" default="false">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
									Indicates if the logs for the traffic are to be written for and available from the traffic page in the SSO Simulator admin. Defaults to false. Can be ‘true’ or any other value which is interpreted as ‘false’.
								]]></xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="sso-cookie" minOccurs="1">
					<xsd:annotation>
						<xsd:documentation><![CDATA[
							Specifies the SSO Cookie name
						]]></xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:all>
							<xsd:element name="cdsso" minOccurs="0">
								<xsd:complexType>
									<xsd:attribute name="domain" use="required" type="aliasableToken"/>
								</xsd:complexType>
							</xsd:element>
						</xsd:all>
						<xsd:attribute name="name" type="aliasableToken" default="obssoCookie">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
									Indicates the name of the SSO token that will be returned from the getCookieNameForToken REST API call and looked for they the simulator’s proxy when performing URL enforcement and user header injection. Defaults to “app-wrap-token”.
								]]></xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="domain" type="aliasableToken" default="localhost">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
									Indicates the domain of the cookie that will be set by the simulator in the select user page. Defaults to "localhost".
								]]></xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="sso-sign-in-url" minOccurs="0">
					<xsd:annotation>
						<xsd:documentation><![CDATA[
							Specifies what url the SSO Simulator will redirect an attempt to access a protected URL for authentication
						]]></xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="value" type="aliasableToken" use="required"/>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="sso-header" minOccurs="0" maxOccurs="unbounded">
					<xsd:annotation>
						<xsd:documentation><![CDATA[
							Specifies a header value to be injected into each request as it passes through the SSO Simulator
						]]></xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="name" type="aliasableToken" use="required">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
									The name of a header to be added to a request. If a child of <config> element the header is a global header and will be added to each sso related request passing through the simulator. If the child of the <user> element then the header is only injected for traffic for the corresponding authenticated user as defined by the sso cookie in the request.
								]]></xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="value" type="aliasableToken" use="required">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
									The value of the header.
								]]></xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="sso-traffic" minOccurs="1">
					<xsd:annotation>
						<xsd:documentation><![CDATA[
							Main element used for configuring routing to protected or unprotected services
						]]></xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="by-site" minOccurs="1" maxOccurs="unbounded">
								<xsd:complexType>
									<xsd:sequence minOccurs="0" maxOccurs="unbounded">
										<xsd:choice>
											<xsd:element name="cctx-file">
												<xsd:complexType>
													<xsd:attribute name="cctx" use="required" type="aliasableTokenEndsInStar">
														<xsd:annotation>
															<xsd:documentation><![CDATA[
																The top level sub-path ending with an asterisk that URLs for the site must start with to match this rule and be served via a local file. Ex: “/images/*”. This is a prefix match independent of if the URL contains query parameters. The terminating asterisk is required and omitting it will result in an error. Be careful about having a terminating slash for the last path element if using relative file paths. See the example in the description of the file attribute indicating how this can result in 404 Not Found.
															]]></xsd:documentation>
														</xsd:annotation>
													</xsd:attribute>
													<xsd:attribute name="file" use="required" type="aliasableToken">
														<xsd:annotation>
															<xsd:documentation><![CDATA[
																An indication of the file or files to be served for matching requests. If prefixed with "classpath:" then the file or files are looked for relative to the classpath. Otherwise the java.io.File() constructor is used and the path can be a fully qualified one, even specific to the operating system if needed, or it can be relative to the current directory.  If the value does NOT end with an asterisk, '*', then the value represents a fixed path for a single file that will be returned for all matching requests regardless of the URL paths beyond the matching cctx part.  If the value ends with an asterisk, '*', then this indicates a relative path and the full path for the file to be served for any specific request is created using a portion of the requested URL. In such a case, the path is determined by taking the value of this attribute, stripping off the "classpath:" prefix if any, and removing the terminating asterisk character, '*'. To this value is appended the portion of the request URL following the matching cctx portion. For this relative case, any occurrence of the character sequence '../' is removed preventing access to files above the relative path specified in this attribute.  In all requests, if the indicated file is not found then an http 404 Not Found response is returned.  Example, suppose that I want to serve all files in the current run-time directory at a URL of host:port/file/relative. To do so I would specify a 'file' attribute value of '*' and a 'cctx' value of '/file/relative/*'. Note the terminating slash character, '/'. Suppose that I mistakenly left off the terminating slash character and assigned cctx='/file/relative*'. When a URL of '/file/relative/textfile.txt' were requested the cctx matching portion would be stripped leaving '/textfile.txt'. To this is prepended the value of the 'file' attribute up to but not including the asterisk leaving a path of, '/textfile.txt'. The file looked for is fully qualified and not relative. Hence, it won't be found by java.io.File() and will result in a 404 response code.
															]]></xsd:documentation>
														</xsd:annotation>
													</xsd:attribute>
													<xsd:attribute name="content-type" default="text/plain" type="xsd:token">
														<xsd:annotation>
															<xsd:documentation><![CDATA[
																The value that should be set for the Content-Type response header when serving the file.
															]]></xsd:documentation>
														</xsd:annotation>
													</xsd:attribute>
												</xsd:complexType>
											</xsd:element>
											<xsd:element name="cctx-mapping">
												<xsd:annotation>
													<xsd:documentation><![CDATA[
														Routes site requests for a specific path to a back end application.
													]]></xsd:documentation>
												</xsd:annotation>
												<xsd:complexType>
													<xsd:attribute name="cctx" use="required" type="aliasableTokenEndsInStar">
														<xsd:annotation>
															<xsd:documentation><![CDATA[
																The top level sub-path ending with an asterisk that URLs for the site must start with to match this rule and be routed to the targeted host and port. Ex: “/temples/*”. This is a prefix match independent of if the URL contains query parameters. The terminating asterisk is required and omitting it will result in error. Additionally, the simulator injects a request header of cctx with the value of this attribute minus the terminating asterisk. This header is used by the SSO client library for Java to facilitate canonical URL generation with its CanonicalHelper class also exposed to JSP and JSF facelets tags via a request attribute of c7l which is short for canonical with '7' representing the number of letters between the letters 'c' and 'l'.
															]]></xsd:documentation>
														</xsd:annotation>
													</xsd:attribute>
													<xsd:attribute name="thost" use="required" type="aliasableToken">
														<xsd:annotation>
															<xsd:documentation><![CDATA[
																The target host to which the traffic will be proxied. This can be by IP address or dns name.
															]]></xsd:documentation>
														</xsd:annotation>
													</xsd:attribute>
													<xsd:attribute name="tpath" use="required" type="aliasableTokenEndsInStar">
														<xsd:annotation>
															<xsd:documentation><![CDATA[
																The top level sub-path ending with an asterisk that URLs should have when hitting the targeted host and port. In the request passing through the simulator, if this pattern is different from the value of cctx, then it replaces the cctx value in the requests URL thus “rewriting” thereby implementing translation between the canonical and application URL space.
															]]></xsd:documentation>
														</xsd:annotation>
													</xsd:attribute>
													<xsd:attribute name="tport" use="required" type="port">
														<xsd:annotation>
															<xsd:documentation><![CDATA[
																The port on the targeted host. This must be an integer, an explicit alias the resolves to an integer, or, as of v5.3, the implicit alias 'console-port' that is available when the config element's console-port is specified as "auto" allowing any available port to be used. See <config>.
															]]></xsd:documentation>
														</xsd:annotation>
													</xsd:attribute>
													<xsd:attribute name="policy-service-url-gateway" type="aliasableToken">
														<xsd:annotation>
															<xsd:documentation><![CDATA[
																Optional attribute in v5.23+. Used to alter the host and port of the policy-service-url header that gets injected by the simulator to tell applications where its rest service resides for fine grained permissions. Why this would be needed is illustrated with the following example.  For example, suppose in the example for preserve-host that a firewall prevented the application on test.lds.org from calling back to the rest service or DNS was unable to resolve your by-site host since you are using etc/hosts to override DNS to point to your local box. You could use a reverse proxy running between your local box and the test server and specify policy-service-url-gateway="127.0.0.1:tunnelPort" and the policy-service-url header would be rewritten with that host and port allowing the application to connect locally but have the reverse tunnel route it to the locally running port of the simulator.
															]]></xsd:documentation>
														</xsd:annotation>
													</xsd:attribute>
													<xsd:attribute name="preserve-host" type="aliasableBoolean" default="true">
														<xsd:annotation>
															<xsd:documentation><![CDATA[
																Optional attribute in v5.3+. Defaults to true. When 'true' or not specified the host header is not changed when proxying to an application. To force the host header to be changed to be the values of thost + ':' + tport add this attribute and set it to false. This would be necessary if the back end application to which traffic is being proxied used virtual hosts different from the host specified by the containing by-site element.  For example, suppose that you want to place the simulator in front of a test server to perform some integration tests but that server has apache fronting the servlet container and that box can be accessed directly by a DNS name of test.lds.org. If apache is using a virtual host of test.lds.org but the simulator is using a host of local.lds.org then apache will return an error since that host does not match its defined virtual host. In such a case, specifying thost="test.lds.org" and preserve-host="false" would cause the host header to be rewritten to the thost + ":" + tport value allowing apache to accept and process the request.
															]]></xsd:documentation>
														</xsd:annotation>
													</xsd:attribute>
													<xsd:attribute name="host-header" type="aliasableToken">
														<xsd:annotation>
															<xsd:documentation><![CDATA[
																Optional attribute in v5.23+. Specifying forces preserve-host to be "false" whether specified or not. When specified, the value of this attribute becomes the full value of the host header as a request is passed to the application.  For example, suppose in the example for preserve-host that a load balancer were sitting in front of the test server and that test.lds.org resolved to the IP address of the load balancer. In such a scenario thost must be the IP address of the serve. But apache must have the host header be "test.lds.org" or it won't accept it. Specifying thost="IP of test server" and host-header="test.lds.org" will route requests to the IP but rewrite the host header to be test.lds.org as needed.
															]]></xsd:documentation>
														</xsd:annotation>
													</xsd:attribute>
												</xsd:complexType>
											</xsd:element>
										</xsd:choice>
										<xsd:choice minOccurs="0" maxOccurs="unbounded">
											<xsd:element name="allow" minOccurs="0" maxOccurs="unbounded">
												<xsd:annotation>
													<xsd:documentation><![CDATA[
														Specifies enforced URLs.
													]]></xsd:documentation>
												</xsd:annotation>
												<xsd:complexType>
													<xsd:attribute name="action" use="required">
														<xsd:annotation>
															<xsd:documentation><![CDATA[
																A comma separated list of http methods that should be allowed for that URL or the asterisk character, *, if it should match any method. When specifying a list of methods if the method for a request does not match those in the list then the request will not be forbidden. Methods will only match if they are in upper case.
															]]></xsd:documentation>
														</xsd:annotation>
														<xsd:simpleType>
															<xsd:restriction base="xsd:token">
																<xsd:pattern value="((GET|POST|PUT|DELETE|HEAD|TRACE),)*(GET|POST|PUT|DELETE|HEAD|TRACE)"></xsd:pattern>
															</xsd:restriction>
														</xsd:simpleType>
													</xsd:attribute>
													<xsd:attribute name="cpath" use="required" type="xsd:token">
														<xsd:annotation>
															<xsd:documentation><![CDATA[
																Identical to the cpath definition in Table 9 but indicates what portions of a site’s subpaths should be restricted to authenticated users and optionally to user meeting certain conditions. See the definition in that table.
															]]></xsd:documentation>
														</xsd:annotation>
													</xsd:attribute>
													<xsd:attribute name="condition" type="aliasable">
														<xsd:annotation>
															<xsd:documentation><![CDATA[
																An optional attribute that must be a system, file, or classpath alias.
															]]></xsd:documentation>
														</xsd:annotation>
													</xsd:attribute>
												</xsd:complexType>
											</xsd:element>
											<xsd:element name="unenforced" minOccurs="0" maxOccurs="unbounded">
												<xsd:annotation>
													<xsd:documentation><![CDATA[
														Specifies unenforced URLs for a site.
													]]></xsd:documentation>
												</xsd:annotation>
												<xsd:complexType>
													<xsd:attribute name="cpath" use="required" type="aliasableToken">
														<xsd:annotation>
															<xsd:documentation><![CDATA[
																Indicates what portions of a site’s subpaths match for this element and should be unenforced. If the value does not contain an asterisk then it is an exact match without query parameters. The asterisk is greedy up to the query string and does not match on the query string when matching in the path. In other words, line 20 will not match on a url of /public/debug.jsp?some-param=some-value. To match on this URL requires a cpath having the form shown in lines 27 and 28 for the <allow> element’s cpath attribute. Line 27 matches on additional path but no query string. Line 28 matches on both additional path and a query string. Both must be present for 28 to match. If the query string is missing then line 27 will match. Line 20 on the other hand will only match on additional path.
															]]></xsd:documentation>
														</xsd:annotation>
													</xsd:attribute>
												</xsd:complexType>
											</xsd:element>
											<xsd:element name="entitlements" minOccurs="0">
												<xsd:annotation>
													<xsd:documentation><![CDATA[
														(v4.12+) Element used for configuring rest interface CD-OESv1 entitlements
													]]></xsd:documentation>
												</xsd:annotation>
												<xsd:complexType>
													<xsd:sequence>
														<xsd:element name="allow" maxOccurs="unbounded">
															<xsd:complexType>
																<xsd:attribute name="action" use="required" type="aliasableToken">
																	<xsd:annotation>
																		<xsd:documentation><![CDATA[
																			An action or comma separated list of actions for the resource.
																		]]></xsd:documentation>
																	</xsd:annotation>
																</xsd:attribute>
																<xsd:attribute name="condition" type="aliasableToken">
																	<xsd:annotation>
																		<xsd:documentation><![CDATA[
																			Required attribute that must be an alias for a condition either embedded via the <condition> element or via the alias processing instruction. The contents of this attribute must be a single macro reference as defined in Aliases and Macros. The contents of the alias must conform to the condition syntax defined in SSO Simulator Condition Syntax.
																		]]></xsd:documentation>
																	</xsd:annotation>
																</xsd:attribute>
																<xsd:attribute name="urn">
																	<xsd:annotation>
																		<xsd:documentation><![CDATA[
																			A URN of form "/x/y/z" used to protect a resource within an application like /leader/navigation/calendar-widget. These URNs will usually only be known and used by the application that defines them.
																		]]></xsd:documentation>
																	</xsd:annotation>
																	<xsd:simpleType>
																		<xsd:restriction base="aliasableToken">
																			<xsd:pattern value="/.*"/>
																		</xsd:restriction>
																	</xsd:simpleType>
																</xsd:attribute>
															</xsd:complexType>
														</xsd:element>
													</xsd:sequence>
												</xsd:complexType>
											</xsd:element>
										</xsd:choice>
									</xsd:sequence>
									<xsd:attribute name="scheme" type="xsd:token" default="http">
										<xsd:annotation>
											<xsd:documentation><![CDATA[
												Taken as-is without any validation. If not specified then it defaults to http which is all that makes sense until the simulator supports https.
											]]></xsd:documentation>
										</xsd:annotation>
									</xsd:attribute>
									<xsd:attribute name="host" type="aliasableToken">
										<xsd:annotation>
											<xsd:documentation><![CDATA[
												The value that will be compared to the host portion of the host header to determine if the packet matches this site and should be subject to its policies.
											]]></xsd:documentation>
										</xsd:annotation>
									</xsd:attribute>
									<xsd:attribute name="port" type="port">
										<xsd:annotation>
											<xsd:documentation><![CDATA[
												The value that will be compared to the port portion of the host header to determine if the packet matches this site and should be subject to its policies. Explicit aliases are those defined in the configuration file. As of v5.3 when "auto" is used as the value of the <config> element's proxy-port attribute, an implicit alias is available allowing the auto-bound proxy port value to be used in this attribute. This is mostly for use in unit tests.
											]]></xsd:documentation>
										</xsd:annotation>
									</xsd:attribute>
								</xsd:complexType>
							</xsd:element>
							<xsd:element name="rewrite-redirect" minOccurs="0" maxOccurs="unbounded">
								<xsd:annotation>
									<xsd:documentation><![CDATA[
										Rewrites the Location header in responses from an application.
									]]></xsd:documentation>
								</xsd:annotation>
								<xsd:complexType>
									<xsd:attribute name="from" use="required" type="aliasableToken"/>
									<xsd:attribute name="to" use="required" type="aliasableToken"/>
								</xsd:complexType>
							</xsd:element>
							<xsd:element name="rewrite-cookie" minOccurs="0" maxOccurs="unbounded">
								<xsd:annotation>
									<xsd:documentation><![CDATA[
										Rewrites the path attribute of a set-cookie application response header.
									]]></xsd:documentation>
								</xsd:annotation>
								<xsd:complexType>
									<xsd:attribute name="from-path" use="required" type="aliasableToken"/>
									<xsd:attribute name="to-path" use="required" type="aliasableToken"/>
								</xsd:complexType>
							</xsd:element>
						</xsd:sequence>
						<xsd:attribute name="strip-empty-headers" type="aliasableBoolean" default="false">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
									Indicates if the proxy should strip empty headers including those injected by the proxy. Defaults to false allowing empty headers to pass through. This was added for a bug in Mark Logic where its get-request-header() and get-request-header-names() fails to see any other headers beyond the first empty header incurred in an http request. Applications should be able to handle empty headers and this feature should not be relied upon as a feature of the full SSO environment once the Mark Logic bug is fixed.
								]]></xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="users" minOccurs="0">
					<xsd:annotation>
						<xsd:documentation><![CDATA[
							Allows for configuration of users that can be but are not necessarily in CODA. Users configured here will be available every time the SSO Simulator starts
						]]></xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="user" minOccurs="0" maxOccurs="unbounded">
								<xsd:complexType>
									<xsd:sequence>
										<xsd:element name="sso-header" minOccurs="0" maxOccurs="unbounded">
											<xsd:annotation>
												<xsd:documentation><![CDATA[
													Used to specify user specific headers to be injected prior to proxying a request to a back end application.
												]]></xsd:documentation>
											</xsd:annotation>
											<xsd:complexType>
												<xsd:attribute name="name" type="aliasableToken" use="required">
													<xsd:annotation>
														<xsd:documentation><![CDATA[
															The name of a header to be added to a request. If a child of <config> element the header is a global header and will be added to each sso related request passing through the simulator. If the child of the <user> element then the header is only injected for traffic for the corresponding authenticated user as defined by the sso cookie in the request.
														]]></xsd:documentation>
													</xsd:annotation>
												</xsd:attribute>
												<xsd:attribute name="value" type="aliasableToken" use="required">
													<xsd:annotation>
														<xsd:documentation><![CDATA[
															The value of the header.
														]]></xsd:documentation>
													</xsd:annotation>
												</xsd:attribute>
											</xsd:complexType>
										</xsd:element>
										<xsd:element name="ldsApplications" minOccurs="0" maxOccurs="unbounded">
											<xsd:annotation>
												<xsd:documentation><![CDATA[
													Used to specify an ldsApplications value for a user.
												]]></xsd:documentation>
											</xsd:annotation>
											<xsd:complexType>
												<xsd:attribute name="value" use="required" type="aliasableToken">
													<xsd:annotation>
														<xsd:documentation><![CDATA[
															The value of the ldsApplications attribute.
														]]></xsd:documentation>
													</xsd:annotation>
												</xsd:attribute>
											</xsd:complexType>
										</xsd:element>
									</xsd:sequence>
									<xsd:attribute name="name" use="required" type="aliasableToken">
										<xsd:annotation>
											<xsd:documentation><![CDATA[
												The username of the user.
											]]></xsd:documentation>
										</xsd:annotation>
									</xsd:attribute>
									<xsd:attribute name="pwd" use="optional" type="aliasableToken">
										<xsd:annotation>
											<xsd:documentation><![CDATA[
												The password of the user if necessary at all. Can be left blank.
											]]></xsd:documentation>
										</xsd:annotation>
									</xsd:attribute>
								</xsd:complexType>
							</xsd:element>
						</xsd:sequence>
						<xsd:attribute name="source" type="aliasableToken">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
									If included must be the URL of a source that can return XML containing the user attribute values to be injected for SSO policy header. Currently, this only supports the coda XML dialect returned from http://tech.lds.org/coda/services/1/member/osso/pholder where pholder is the ID of the signed-in user. The URL can contain a macro of %%username%% that will be replaced with the user id of the currently signed-in user. Attributes are cached for the duration of the user’s session and reloaded each time they log in.
								]]></xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="session-timeout-seconds" type="aliasableInteger" default="300">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
									Defaults to 300 seconds which is five minutes. If specified it defines how long a user session lasts without either sso or REST traffic activity before expiring. Any traffic resets the session’s counter.
								]]></xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
					</xsd:complexType>
				</xsd:element>
			</xsd:sequence>
			<xsd:attribute name="console-port" use="required" type="port">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
						The port on which the simulator's console is located. If 'auto' is specified then the console will be started on any available port. If not 'auto' then the value must be an integer. The 'auto' feature was added in v4.13 to allow the simulator to be programmatically started more easily in unit tests. v5.3 added support for the auto-bound port value being used in the <cctx-mapping> element's tport attribute.
					]]></xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="proxy-port" use="required" type="port">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
						The port on which the simulated site will appear with all back-end applications mapped into its subdirectory space or 'auto' if the simulator should be started on any available port. If not 'auto' then the value must be an integer. The 'auto' feature was added in v4.13 to allow the simulator to be programmatically started more easily in unit tests. v5.3 added support for the auto-bound port value being used in the <by-site> element's port attribute.
					]]></xsd:documentation>
					<xsd:appinfo><![CDATA[
						Integer or 'auto' or Alias
					]]></xsd:appinfo>
					<xsd:appinfo ></xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="allow-non-sso-traffic" type="xsd:boolean" default="false">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
						Indicates if the simulator should act as a forward proxy in addition to acting as a reverse proxy for the simulated site. See SSO Environment Overview. If allowed, then a browser can be configured to use the simulator's proxy-port as its http proxy. The default is false and causes the simulator to serve a 503 for any traffic that does not match the configured SSO traffic.
					]]></xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="rest-version" default="CD-OESv1">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
						(As of v4.12)Indicates the rest interface that should be exposed by the simulator. CD-OESv1 is the Church Defined Oracle Entitlements Server. openSSO is the version that mimics the openSSO policy server. Defaults to CD-OESv1 in v4.12+, to openSSO in prior versions.
					]]></xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:token">
						<xsd:enumeration value="CD-OESv1"/>
						<xsd:enumeration value="openSSO"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
</xsd:schema>